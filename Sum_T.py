from mpmath import mp

mp.dps = 22

#####
#  Количество треугольничков на инвариантной кривой
#####

a = mp.mpf('1.44')
b = mp.mpf('0.5')
c = mp.mpf('-1.7615')


def henon(x, a, b, c):
    dx = mp.matrix([[0, 0, 0]])
    dx[0] = x[1]
    dx[1] = x[2]
    dx[2] = b * x[0] + a * x[2] + c * x[1] - x[1] ** 2
    return dx


x = [mp.mpf('0.1'), mp.mpf('0.1'), mp.mpf('0.1')]

fx = []
fy = []
fz = []

# переходной процесс
for i in range(100_000):
    x = henon(x, a, b, c)

# нахождение точки на треугольнике, который находится на области:
# -0.3799 < x < -0.3791
# -0.4084125 < y < -0.408125
# точку же мы возьмем из начала возникновения треугольника,
# она находится на области:
# -0.3799 < x < -0.3798
# -0.4082 < y < -0.4081
while (x[0] < -0.41 or x[0] > -0.39) or (x[1] < -0.41 or x[1] > -0.39):
    x = henon(x, a, b, c)

x_in_triangle = x
print(x_in_triangle)
number = 1
x = henon(x, a, b, c)

# запуск счетчика и его отключение при возвращении в область треугольника
# while (x[0] < -0.44 or x[0] > -0.3) or (x[1] < -0.46 or x[1] > -0.34):
#     x = henon(x, a, b, c)
#     number += 1

# # запуск счетчика и его отключение при возвращении в область точки старта
while (x[0] < -0.41 or x[0] > -0.39) or (x[1] < -0.41 or x[1] > -0.39):
    x = henon(x, a, b, c)
    number += 1

print(x)
print(number)